/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.controller.employee;

import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import project.JavaFxApplication;
import project.Util;
import project.entity.Employee;
import project.managers.EmployeeManager;
import project.model.EmployeeRole;
import project.model.EmployeeTR;

import java.net.URL;
import java.util.ResourceBundle;

/**
 * @author Sahil Patel
 */
public class AddEmployeeController extends JavaFxApplication implements Initializable {

    /**
     * Initializes the project.controller class.
     */
    /*
     * This is the FXML code for the add user pop up that will appear once you click the button inside of the user view
     */
    @FXML
    private TextField txtFName;
    @FXML
    private TextField txtLName;
    @FXML
    private ComboBox<EmployeeRole> cbxRole;
    @FXML
    private CheckBox cbStatus;
    @FXML
    private TextField txtPassword;

    private ObservableList<EmployeeTR> employeeList;

    public void saveAction(ActionEvent event) {

    	 /*
         * Once you type all the information into the text fields and save it will add to the table below
         * or else it will send a message alert to fill out all the fields to save. 
         */
    	
        if(!txtFName.getText().isEmpty() && !txtLName.getText().isEmpty() && cbxRole.getValue()!=null &&cbxRole.getValue()!=null  && !txtPassword.getText().isEmpty()){
            Employee employee =new Employee(txtFName.getText(),
                    txtLName.getText(),
                    cbxRole.getValue(),
                    cbStatus.isSelected(),
                    txtPassword.getText());
            EmployeeManager.saveEmployee(employee);
            employeeList.add(employee.toEmployeeTR());
            Node source = (Node) event.getSource();
            Stage stage = (Stage) source.getScene().getWindow();
            stage.close();
        }else{
            errorAlert("Error: Required Field Missing.","Required Field Missing","Please fill in the required fields!");
        }
    }

    /*
     * This will add the user into the list aka table and display it
     */
    public void addUserList(ObservableList<EmployeeTR> list) {
        this.employeeList = list;
    }

    @Override
    public void initialize(URL url, ResourceBundle rb) {
    	/*
    	 * Status is disabled because status is generated by application and cannot be given as input by user.
    	 * This sets the status to false by default since new employees will always be offline
    	 * It has the default text inside of the combo box to say "Select Role"
    	 * This will set the first name and last name both to words only so that no numbers will be allowed
    	 */
    	cbStatus.setDisable(true);
        cbStatus.setSelected(false);

    	cbxRole.setPromptText("Select Role");
        Util.formatToAlphabetOnly(txtFName);
        Util.formatToAlphabetOnly(txtLName);

        cbxRole.getItems().addAll(EmployeeRole.values());
    }

}
